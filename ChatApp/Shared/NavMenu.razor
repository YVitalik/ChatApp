@using ChatApp.BLL.Interfaces
@using ChatApp.Pages
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@inherits Base

@{
    base.BuildRenderTree(__builder);
}

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ChatApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

@if (_isLoggedIn)
{
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="private">
                <span class="oi oi-plus" aria-hidden="true"></span> Private chats
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="createpublic">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Public chats
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" @onclick="Logout">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Logout
            </NavLink>
        </div>
    </nav>
    </div>
}

else
{
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="register">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Register
            </NavLink>
        </div>
    </nav>
    </div>
}

@code {

    [Inject] private IUserStateService _userStateService { get; set; }

    private bool collapseNavMenu = true;
    private bool _isLoggedIn;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async void Logout()
    {
        await _userStateService.Logout();
        NavManager.NavigateTo("/");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var checkIfAuth = await localStorage.GetItemAsync<string>("authToken");

        if (checkIfAuth == null)
        {
            _isLoggedIn = false;  
            StateHasChanged();
        }

        else
        {
            _isLoggedIn = true;
            StateHasChanged();
        }
    }
}
