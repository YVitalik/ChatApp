@page "/createpublic"
@using ChatApp.BLL.DTOs
@using ChatApp.BLL.DTOs.ChatDTOs
@using ChatApp.BLL.Interfaces
@inject NavigationManager NavManager
@inherits Base

@{
    base.BuildRenderTree(__builder);
}

<div class="row">
    
    @if (_userChats == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
    <div class="col">
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th scope="col">My chats</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var chat in _userChats)
                {
                    <tr>
                        <td>@chat.Name</td>
                        <td><button @onclick="() => OpenChat(chat.Id)" class="btn btn-success">Open chat</button></td>
                    </tr>
                }
            </tbody>
        </table>
	</div>
    }

    @if (_allChats == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
    <div class="col">
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Available chats</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var chat in _allChats)
                {
                    <tr>
                        <td>@chat.Name</td>
                        <td><button @onclick="() => JoinRoom(chat.Id)" class="btn btn-success">Join this chat</button></td>
                    </tr>
                }
            </tbody>
        </table>
	</div>
    }

</div>

<div class="form-group mb-2">
  <input style="width: 300px; height: 35px;" class="form-control" @bind:event="oninput" @bind="chatName" />
</div>
<button type="submit" @onclick="CreatePublic" class="btn btn-success mb-2">
  Create new public chat and join
</button>

@code{
    [Inject] private IIntermediateChatService _intermediateChatService { get; set; }

    private IEnumerable<ReadChatDto>? _allChats;
    private IEnumerable<ReadChatDto>? _userChats;

    private string? chatName;

    private async void CreatePublic()
    {
        ServerResponse result = await _intermediateChatService.CreatePublicChat(chatName);
        CheckIfUserHasAccess(result, () => { NavManager.NavigateTo("/");
            NavManager.NavigateTo("/createpublic");
        });
    }

    private async void OpenChat(int chatId)
    {
        NavManager.NavigateTo("/chat/" + chatId);
    }

    private async void JoinRoom(int chatId)
    {
        ServerResponse result = await _intermediateChatService.JoinRoom(chatId);
        CheckIfUserHasAccess(result, () => { NavManager.NavigateTo("/");
            NavManager.NavigateTo("/createpublic");
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ServerResponseWithChats getAllChats = await _intermediateChatService.GetAllPublicChats();
            ServerResponseWithChats getUserChats = await _intermediateChatService.GetUserPublicChats();
            CheckIfUserHasAccess(getAllChats, () => { _allChats = getAllChats.Chats; });
            CheckIfUserHasAccess(getUserChats, () => { _userChats = getUserChats.Chats; });
            StateHasChanged();
        }
    }

}
