@page "/chat/{chatId:int}"
@using ChatApp.BLL.DTOs
@using ChatApp.BLL.DTOs.ChatDTOs
@using ChatApp.BLL.Interfaces
@using ChatApp.DAL.Entities
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavManager
@inherits Base

@if (_chatMessages == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
    <div class="col">
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Messages</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var message in _chatMessages)
                {
                    <tr>
                        <td>@message.Text</td>
                        <td>@message.Name</td>
                    </tr>
                }
            </tbody>
        </table>
        
        <EditForm Model="CreateMessage" OnValidSubmit="AddMessage" style="max-width:500px;">
	    <DataAnnotationsValidator />
	    <ValidationSummary />
	        <div class="mb-2">
		    <InputText class="form-control" @bind-Value="CreateMessage.MessageText"></InputText>
	        </div>
	        <div class="mb-2 text-right">
		        <button class="btn btn-secondary">Add message</button>
	        </div>
        </EditForm>

	</div>
    }

@code{
    [Inject] private IIntermediateChatService _intermediateChatService { get; set; }

    private List<Message>? _chatMessages;
    private CreateMessageDto CreateMessage = new CreateMessageDto();
    private HubConnection _hubConnection;

    [Parameter]
    public int ChatId { get; set; }

    private async void AddMessage()
    {
        CreateMessage.ChatId = ChatId;
        var newMessage = await _intermediateChatService.CreateMessage(CreateMessage);
        await _hubConnection.SendAsync("SendMessage", newMessage.ChatId, newMessage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ServerResponseWithMessages getChatMessages = await _intermediateChatService.GetChatMessages(ChatId);
            CheckIfUserHasAccess(getChatMessages, () => { _chatMessages = getChatMessages.Messages; });

            _hubConnection = new HubConnectionBuilder()
                 .WithUrl(NavManager.ToAbsoluteUri("/chat"))
                 .Build();

            _hubConnection.On<Message>("ReceiveMessage", (message) =>
            {
                _chatMessages.Add(message);
                InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync("JoinRoom", ChatId);

            StateHasChanged();
        }
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;
}