@page "/chat/{chatId:int}"
@using ChatApp.BLL.DTOs
@using ChatApp.BLL.DTOs.ChatDTOs
@using ChatApp.BLL.Interfaces
@using ChatApp.DAL.Entities
@using Microsoft.AspNetCore.SignalR.Client;
@using Newtonsoft.Json
@inject NavigationManager NavManager
@inherits Base

@if (_chatMessages == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
    <div class="col">
        <div style="width:100%; height:500px; overflow:auto;">
        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Messages</th>
                    <th scope="col">Send time</th>
                    <th scope="col">Sender name</th>
                    <th scope="col"><button @onclick="() => ShowOlderMessages()" class="btn btn-primary">Show older messages</button></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var message in _chatMessages)
                {
                    <tr>
                        @if (_editing == true && message.Id == _currentUpdatingMessageId)
                        {
                            <td><input style="width: 300px; height: 35px;" class="form-control" @bind:event="oninput" @bind="_newMessageText" placeholder="@message.Text"/></td>
                            <td><button class="btn btn-success" @onclick="() => UpdateMessage(message.Id)">Update message</button></td>
                            <td><button class="btn btn-danger" @onclick="() => ChangeMessageUpdateState(message.Id)">Go back</button></td>
                        }
                        else if (_replying == true && message.Id == _currentReplyingMessageId)
                        {
                            <td><input style="width: 300px; height: 35px;" class="form-control" @bind:event="oninput" @bind="_chatForReply" placeholder="Enter chat name"/></td>
                            <td><button class="btn btn-success" @onclick="() => ReplyMessage(message.Id)">Reply message</button></td>
                            <td><button class="btn btn-danger" @onclick="() => ChangeMessageReplyState(message.Id)">Go back</button></td>
                        }
                        else
                        {
                            <td>@message.Text</td>
                            <td>@message.CreatedAt</td>
                            <td>@message.Name</td>
                            <td><button @onclick="() => ChangeMessageUpdateState(message.Id)"><i class="fa fa-pencil"></i></button></td>
                            <td><button @onclick="() => DeleteMessage(message.Id)"><i class="fa fa-trash"></i></button></td>
                            <td><button @onclick="() => ChangeMessageReplyState(message.Id)"><i class="fa fa-reply"></i></button></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        </div>

        <br>
        
        <EditForm Model="CreateMessage" OnValidSubmit="AddMessage" style="max-width:500px;">
	    <DataAnnotationsValidator />
	    <ValidationSummary />
	        <div class="mb-2">
		        <InputText class="form-control" @bind-Value="CreateMessage.MessageText"></InputText>
	        </div>
	        <div class="mb-2 text-right">
		        <button class="btn btn-secondary">Add message</button>
	        </div>
        </EditForm>

	</div>

    @if (_errorsFromServer.Count > 0)
    {
        @foreach (var mistake in _errorsFromServer)
        {
            <p>@mistake</p>
        }
    }

    }

@code{
    [Inject] private IIntermediateMessageService _intermediateMessageService { get; set; }

    private List<ReadMessageDto>? _chatMessages;
    private int _amountOfMessagesToTake = 15;
    private IEnumerable<ReadChatDto>? _userChats;
    private CreateMessageDto CreateMessage = new CreateMessageDto();
    private HubConnection _hubConnection;
    private bool _editing = false;
    private bool _replying = false;
    private int? _currentReplyingMessageId;
    private int? _currentUpdatingMessageId;
    private string? _newMessageText;
    private string? _chatForReply;

    [Parameter]
    public int ChatId { get; set; }

    private void ChangeMessageReplyState(int messageId)
    {
        if (_replying == false)
        {
            _replying = true;
            _currentReplyingMessageId = messageId;
        }
        else
        {
            _replying = false;
            _currentReplyingMessageId = null;
        }
    }

    private async void ShowOlderMessages()
    {
        var timeOfSending = _chatMessages[0].CreatedAt;

        var readChatMessagesDto = new ReadChatMessagesDto
        {
            ChatId = ChatId,
            AmountOfMessagesToTake = _amountOfMessagesToTake,
            TimeOfSending = timeOfSending
        };

        var oldMessages = await _intermediateMessageService.GetChatMessages(readChatMessagesDto);
        await _hubConnection.SendAsync("SendOlderMessages", oldMessages.Messages);
    }

    private void ChangeMessageUpdateState(int messageId)
    {
        if (_editing == false)
        {
            _editing = true;
            _currentUpdatingMessageId = messageId;
        }
        else
        {
            _editing = false;
            _currentUpdatingMessageId = null;
        }
    }

    private async void DeleteMessage(int messageId)
    {
        var serverResponse = await _intermediateMessageService.DeleteMessage(messageId);

        var checkIfStatusCodeOk = await CheckIfServerResponseIsSucceded(serverResponse);

        if (checkIfStatusCodeOk)
        {
            var deletedMessageId = JsonConvert.DeserializeObject<int>(await serverResponse.Content.ReadAsStringAsync());
            await _hubConnection.SendAsync("DeleteMessage", ChatId, deletedMessageId);
        }
    }

    private async void UpdateMessage(int messageId)
    {
        var updateMessageDto = new UpdateMessageDto
        {
            Id = messageId,
            Text = _newMessageText
        };

        var serverResponse = await _intermediateMessageService.UpdateMessage(updateMessageDto);

        var checkIfStatusCodeOk = await CheckIfServerResponseIsSucceded(serverResponse);

        if (checkIfStatusCodeOk)
        {
            var updatedMessage = JsonConvert.DeserializeObject<ReadMessageDto>(await serverResponse.Content.ReadAsStringAsync());

            await _hubConnection.SendAsync("SendUpdatedMessage", updatedMessage.ChatId, updatedMessage);
            _newMessageText = String.Empty;
            ChangeMessageUpdateState(updatedMessage.Id);
        }
    }

    private async void ReplyMessage(int messageId)
    {
        var replyMessageDto = new ReplyMessageDto
        {
            ChatNameToReply = _chatForReply,
            MessageId = messageId
        };

        var serverResponse = await _intermediateMessageService.ReplyMessage(replyMessageDto);

        var checkIfStatusCodeOk = await CheckIfServerResponseIsSucceded(serverResponse);

        if (checkIfStatusCodeOk)
        {
            var repliedMessage = JsonConvert.DeserializeObject<ReadMessageDto>(await serverResponse.Content.ReadAsStringAsync());

            if (repliedMessage.ChatId == ChatId)
            {
                await _hubConnection.SendAsync("SendMessage", repliedMessage.ChatId, repliedMessage);
                _chatForReply = String.Empty;
                ChangeMessageReplyState(repliedMessage.Id);
            }
            else
            {
                NavManager.NavigateTo("/");
                NavManager.NavigateTo("/chat/" + ChatId);
            }
        }
    }

    private async void AddMessage()
    {
        CreateMessage.ChatId = ChatId;
        var newMessage = await _intermediateMessageService.CreateMessage(CreateMessage);
        await _hubConnection.SendAsync("SendMessage", newMessage.ChatId, newMessage);
        CreateMessage.MessageText = String.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var readChatMessagesDto = new ReadChatMessagesDto
            {
                ChatId = ChatId,
                AmountOfMessagesToTake = _amountOfMessagesToTake
            };

            ServerResponseWithMessages getChatMessages = await _intermediateMessageService.GetChatMessages(readChatMessagesDto);

            CheckIfUserHasAccess(getChatMessages, () => { _chatMessages = getChatMessages.Messages; });

            _hubConnection = new HubConnectionBuilder()
                 .WithUrl(NavManager.ToAbsoluteUri("/chat"))
                 .Build();

            _hubConnection.On<ReadMessageDto>("ReceiveMessage", (message) =>
            {
                _chatMessages.Add(message);
                InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<ReadMessageDto>("ReceiveUpdatedMessage", (message) =>
            {
                _chatMessages.Where(x => x.Id == message.Id).ToList().ForEach(s => s.Text = message.Text);
                InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<int>("UpdateChatWhenMessageIdDeleted", (messageId) =>
            {
                var messageToDelete = _chatMessages.FirstOrDefault(x => x.Id == messageId);
                _chatMessages.Remove(messageToDelete);
                InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<List<ReadMessageDto>>("ReceiveOldMessages", (oldMessages) =>
            {
                var temporaryChatMessages = _chatMessages.Concat(oldMessages).OrderBy(x => x.CreatedAt).ToList();
                _chatMessages = temporaryChatMessages;
                InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync("JoinRoom", ChatId);

            StateHasChanged();
        }
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;
}